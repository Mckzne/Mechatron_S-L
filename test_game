import time
import json
import random
import os

# -------------------
# Configuration
# -------------------
BROKER = "10.42.0.1"
MQTT_PORT = 1883
TILE_MAPPING = {
    'esp/1/in':  {'tiles': [1, 2, 19, 20], 'pins': [13, 12, 27, 14]},
    'esp/2/in':  {'tiles': [3, 4, 17, 18], 'pins': [13, 12, 27, 14]},
    'esp/3/in':  {'tiles': [5, 6, 15, 16], 'pins': [13, 12, 27, 14]},
    'esp/4/in':  {'tiles': [7, 8, 13, 14], 'pins': [13, 12, 27, 14]},
    'esp/5/in':  {'tiles': [9, 10, 11, 12], 'pins': [12, 13, 14, 27]},
    'esp/10/in':  {'tiles': [29, 30, 31, 32], 'pins': [13, 12, 27, 14]},
    'esp/9/in':  {'tiles': [27, 28, 33, 34], 'pins': [13, 12, 27, 14]},
    'esp/8/in':  {'tiles': [25, 26, 35, 36], 'pins': [13, 12, 27, 14]},
    'esp/7/in':  {'tiles': [23, 24, 37, 38], 'pins': [13, 12, 27, 14]},
    'esp/6/in': {'tiles': [21, 22, 39, 40], 'pins': [13, 12, 27, 14]},
    'esp/11/in': {'tiles': [41, 42, 59, 60], 'pins': [13, 12, 27, 14]},
    'esp/12/in': {'tiles': [43, 44, 57, 58], 'pins': [13, 12, 27, 14]},
    'esp/13/in': {'tiles': [45, 46, 55, 56], 'pins': [13, 12, 27, 14]},
    'esp/14/in': {'tiles': [47, 48, 53, 54], 'pins': [13, 12, 27, 14]},
    'esp/15/in': {'tiles': [49, 50, 51, 52], 'pins': [13, 12, 27, 14]},
    'esp/16/in': {'tiles': [69, 70, 71, 72], 'pins': [13, 12, 27, 14]},
    'esp/17/in': {'tiles': [67, 68, 73, 74], 'pins': [13, 12, 27, 14]},
    'esp/18/in': {'tiles': [65, 66, 75, 76], 'pins': [13, 12, 27, 14]},
    'esp/19/in': {'tiles': [63, 64, 77, 78], 'pins': [13, 12, 27, 14]},
    'esp/20/in': {'tiles': [61, 62, 79, 80], 'pins': [13, 12, 27, 14]},
    'esp/21/in': {'tiles': [89, 90, 91, 92], 'pins': [13, 12, 27, 14]},
    'esp/22/in': {'tiles': [87, 88, 93, 94], 'pins': [13, 12, 27, 14]},
    'esp/23/in': {'tiles': [85, 86, 95, 96], 'pins': [13, 12, 27, 14]},
    'esp/24/in': {'tiles': [83, 84, 97, 98], 'pins': [13, 12, 27, 14]},
    'esp/25/in': {'tiles': [81, 82, 99, 100], 'pins': [13, 12, 27, 14]}
}


# Only using two teams
TEAMS = {
    "Team1": {"color": "#00CED1"},   # Teal Cyan
    "Team2": {"color": "#800080"}    # Purple
}

STATE_FILE = "game_state.json"

SNAKES = {17:7, 54:34, 62:19, 98:79}
LADDERS = {3:22, 5:8, 20:38, 28:84, 71:91}

# -------------------
# MQTT
# -------------------
import paho.mqtt.client as mqtt

client = mqtt.Client("master_pi", protocol=mqtt.MQTTv311)
client.connect(BROKER, MQTT_PORT, 60)
client.loop_start()

def publish(topic, payload):
    client.publish(topic, json.dumps(payload))

def log(msg):
    print(f"[{time.strftime('%H:%M:%S')}] {msg}")

def save_state(game_state):
    with open(STATE_FILE, "w") as f:
        json.dump(game_state, f)

def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    else:
        return None

def all_leds_off():
    # Turn off all LEDs
    for topic, mapping in TILE_MAPPING.items():
        for pin in mapping["pins"]:
            payload = {"tile": None, "state": "off", "color": "#000000"}
            publish(topic, payload)

def set_team_tile(tile, team):
    # Light only the final tile for the team color
    for topic, mapping in TILE_MAPPING.items():
        if tile in mapping["tiles"]:
            idx = mapping["tiles"].index(tile)
            pin = mapping["pins"][idx]
            payload = {"tile": tile, "state": "on", "color": TEAMS[team]["color"]}
            publish(topic, payload)
        else:
            # Turn off tiles for this ESP
            for pin in mapping["pins"]:
                payload = {"tile": None, "state": "off", "color": "#000000"}
                publish(topic, payload)

def roll_dice():
    return random.randint(1,6)

def main():
    # Load or initialize state
    game_state = load_state()
    if not game_state:
        game_state = {"positions": {team: 0 for team in TEAMS}}
        save_state(game_state)

    all_leds_off()

    while True:
        # Show current positions
        print("\nCurrent Positions:")
        for team in TEAMS:
            print(f" {team} at tile {game_state['positions'][team]}")
        print("All tiles except landed positions are turned off!\n")

        # Glow each team's tile
        all_leds_off()
        for team, pos in game_state['positions'].items():
            if pos > 0: set_team_tile(pos, team)

        # Team buzzer input
        first_team = input("\nWhich team pressed the buzzer first? (Team1/Team2): ").strip()
        if first_team not in TEAMS:
            print("Invalid team. Try again.")
            continue

        # Round or roll
        choice = input("Choose: another round or roll dice? (round/roll): ").strip().lower()
        if choice == "round":
            other_team = [t for t in TEAMS if t != first_team][0]
            print(f"{first_team} can't answer again this round.")
            next_team = input(f"Enter other team who answers (only {other_team}): ").strip()
            if next_team != other_team:
                print("Invalid or blocked team. Round resetting...")
                continue

            result = input("Is the answer correct or wrong? (correct/wrong): ").strip().lower()
            if result == "wrong":
                print("Wrong answer, round resetting...")
                continue
            else:
                steps = roll_dice()
                print(f"{next_team} rolls the dice... got {steps}!")
                move_team(next_team, steps, game_state)
                save_state(game_state)
                continue  # back to next round
        elif choice == "roll":
            steps = roll_dice()
            print(f"{first_team} rolls the dice... got {steps}!")
            move_team(first_team, steps, game_state)
            save_state(game_state)
        else:
            print("Invalid input. Try again.")
            continue

def move_team(team, steps, game_state):
    start_pos = game_state['positions'][team]
    end_pos = min(start_pos + steps, 100)
    print(f"{team} moves from {start_pos} to {end_pos}")

    # No full path animation, just show the final tile
    # Handle snakes and ladders
    if end_pos in SNAKES:
        print(f"Oh no! Landed on a snake, slide down to {SNAKES[end_pos]}")
        end_pos = SNAKES[end_pos]
    elif end_pos in LADDERS:
        print(f"Woohoo! Took a ladder up to {LADDERS[end_pos]}")
        end_pos = LADDERS[end_pos]

    # Update position
    game_state['positions'][team] = end_pos

    # Show final position color, turn all others off
    all_leds_off()
    set_team_tile(end_pos, team)
    time.sleep(0.5)

if _name_ == "_main_":
    main()
